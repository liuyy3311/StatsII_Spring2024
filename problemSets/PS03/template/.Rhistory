return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
for (var_name in names(vars)) {
skewness <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", skewness,"\n")
}
skew_var <- function(data) {
mean_val <- mean(data)
median_val <- median(data)
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
for (var_name in names(vars)) {
skewness <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", skewness,"\n")
}
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
vars
skew_var <- function(data) {
mean_val <- mean(data)
median_val <- median(data)
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
for (var_name in names(vars)) {
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
for (ver_name in names(vars)) {
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
for (ver_name in names(vars)) {
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
for (ver_name in names(vars)) {
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
for (ver_name in names(vars)) {
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
skew_var <- function(data) {
median_val <- median(data)
for (ver_name in names(vars)) {
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
skew_var <- function(data) {
mean_val <- mean(data)
median_val <- median(data)
for (ver_name in names(vars)) {
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
}
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
vars
skew_var <- function(data) {
mean_val <- mean(data)
median_val <- median(data)
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
for (var_name in names(vars)) {
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
vars
skew_var <- function(data) {
mean_val <- mean(data)
median_val <- median(data)
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
for (var_name in names(vars)) {
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
vars
skew_var <- function(data) {
mean_val <- mean(data)
median_val <- median(data)
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
for (var_name in names(vars)) {
skewness <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", skewness,"\n")
}
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
vars
skew_var <- function(data) {
mean_val <- mean(data)
median_val <- median(data)
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
for (var_name in names(vars)) {
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
vars
skew_var <- function(data) {
mean_val <- mean(data)
median_val <- median(data)
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
for (var_name in names(vars)) {
result <- skew_var(vars[[var_name]])
cat("Variable", var_name, "is", result,"\n")
}
for (var_name in names(vars)) {
skewness <- get_skewness(vars[[var_name]])
cat("Variable", var_name, "is", skewness,"\n")
}
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
vars
get_skewness <- function(data) {
mean_val <- mean(data)
median_val <- median(data)
if (mean_val < median_val) {
return("left skew")
} else if (mean_val > median_val) {
return("right skew")
} else {
return("approximately normally distributed")
}
}
for (var_name in names(vars)) {
skewness <- get_skewness(vars[[var_name]])
cat("Variable", var_name, "is", skewness,"\n")
}
# Load the data
data <- expenditure
# Scatterplot matrix
pairs(data[c("Y", "X1", "X2", "X3")], main="Scatterplot Matrix")
# Calculate correlations
correlations <- cor(data[c("Y", "X1", "X2", "X3")])
print(correlations)
# Create a boxplot
ggplot(data, aes(x = Region, y = Y)) +
geom_boxplot() +
labs(x = "Region", y = "Per Capita Expenditure") +
theme_minimal()
# Create a scatterplot with different symbols and colors for regions
ggplot(data, aes(x = X1, y = Y, color = factor(Region), shape = factor(Region))) +
geom_point() +
labs(x = "Per Capita Income", y = "Per Capita Expenditure") +
scale_color_manual(values = c("1" = "red", "2" = "blue", "3" = "green", "4" = "purple")) +
scale_shape_manual(values = c("1" = 16, "2" = 17, "3" = 18, "4" = 19)) +
theme_minimal()
# Scatterplot matrix
pairs(data_expenditure[c("Y", "X1", "X2", "X3")], main="Scatterplot Matrix")
# Calculate correlations
correlations <- cor(data_expenditure[c("Y", "X1", "X2", "X3")])
print(correlations)
# Create a boxplot
ggplot(data_expenditure, aes(x = Region, y = Y)) +
geom_boxplot() +
labs(x = "Region", y = "Per Capita Expenditure") +
theme_minimal()
data_expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/expenditure.txt", header=T)
data_expenditure
data_expenditure
data_expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/expenditure.txt", header=T)
print(data_expenditure)
pairs(data_expenditure[c("Y", "X1", "X2", "X3")], main="Scatterplot Matrix")
# Calculate correlations
correlations <- cor(data_expenditure[c("Y", "X1", "X2", "X3")])
# Create a scatterplot with different symbols and colors for regions
ggplot(data, aes(x = X1, y = Y, color = factor(Region), shape = factor(Region))) +
geom_point(size=3) +
labs(x = "Per Capita Income", y = "Per Capita Expenditure") +
ggtitle("X1 VS Y")
scale_color_manual(values = c("1" = "red", "2" = "blue", "3" = "green", "4" = "purple")) +
scale_shape_manual(values = c("1" = 16, "2" = 17, "3" = 18, "4" = 19)) +
theme_minimal()
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
#####################
# Problem 2
install.packages("ggplot2")
library(ggplot2)
#####################
# Problem 2
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
lapply(c(" "),  pkgTest)
library(ggplot2)
#####################
# Problem 2
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
#####################
# Problem 2
install.packages("ggplot2")
library(ggplot2)
#####################
#Question2.1
data_expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/expenditure.txt", header=T)
pairs(data_expenditure[c("Y", "X1", "X2", "X3")], main="Scatterplot Matrix")
correlations <- cor(data_expenditure[c("Y", "X1", "X2", "X3")])
print(correlations)
# -------------------------------------------------------------------------
basic_calculator <- function(num1, num2, operation) {
# Your code goes here
return(result)
}
# Test the function
result1 <- basic_calculator(5, 3, 'add')
result2 <- basic_calculator(10, 2, 'subtract')
result3 <- basic_calculator(4, 7, 'multiply')
# -------------------------------------------------------------------------
basic_calculator <- function(num1, num2, operation) {
# Your code goes here
return(result)
}
# -------------------------------------------------------------------------
set.seed(4)
mat <- matrix(runif(500, 0, 10), nrow = 50, ncol = 10)
num_na_values <- round(0.02 * 500)
na_indices <- sample(500, num_na_values)
mat[na_indices] <- NA
mat
# Inspect the original matrix by printing it
print("Original Matrix:")
print(mat)
# Define a function to clean NA values with linear interpolation
clean_na <- function(matrix) {
for (i in 1:nrow(matrix)) {
for (j in 1:ncol(matrix)) {
if (is.na(matrix[i, j])) {
# Find the previous and following non-NA values
prev_val <- ifelse(j > 1, matrix[i, j - 1], NA)
next_val <- ifelse(j < ncol(matrix), matrix[i, j + 1], NA)
# Interpolate the NA value using the mean of the adjacent values
if (!is.na(prev_val) && !is.na(next_val)) {
matrix[i, j] <- (prev_val + next_val) / 2
} else if (!is.na(prev_val)) {
matrix[i, j] <- prev_val
} else if (!is.na(next_val)) {
matrix[i, j] <- next_val
}
}
}
}
return(matrix)
}
# Run the function in a for loop to clean NA values in each row
for (i in 1:nrow(mat)) {
cat("Original Row ", i, ": ", mat[i, ], "\n")
cleaned_row <- clean_na(mat[i, ])
cat("Cleaned Row ", i, ": ", cleaned_row, "\n\n")
}
#####################
# Problem 1
#####################
Question1.1
# load data
gdp_data <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/gdpChange.csv", stringsAsFactors = F)
head(gdp_data)
ftable(xtabs(~OIL+REG+GDPWdiff,data = gdp_data))
#do some wrangling
gdp_data$GDPWdiff <- ifelse(gdp_data$GDPWdiff > 0, 'positive',
ifelse(gdp_data$GDPWdiff < 0, 'negative', 'no change'))
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("nnet", "MASS"),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
Question1.1
gdp_data$GDPWdiff <- factor(gdp_data$GDPWdiff,
levels = c('positive', 'negative','no change'),
labels = c('positive', 'negative','no change'))
gdp_data$REG <- factor(gdp_data$REG,
levels = c(0,1),
labels = c('Non-Democracy','Democracy'))
gdp_data$OIL <- factor(gdp_data$OIL,
levels = c(0,1),
labels = c('Otherwise','exceeded'))
ftable(xtabs(~OIL+REG+GDPWdiff,data = gdp_data))
#set a reference level for the outcome
gdp_data$GDPWdiff <- relevel(gdp_data$GDPWdiff, ref = "no change")
#Constract a unordered multinomial logit
unorder_model <- multinom(GDPWdiff~OIL+REG, data = gdp_data,)
#####################
# Problem 1
#####################
#Question1.1
# load data
gdp_data <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/gdpChange.csv", stringsAsFactors = F)
head(gdp_data)
ftable(xtabs(~OIL+REG+GDPWdiff,data = gdp_data))
#do some wrangling
gdp_data$GDPWdiff <- ifelse(gdp_data$GDPWdiff > 0, 'positive',
ifelse(gdp_data$GDPWdiff < 0, 'negative', 'no change'))
gdp_data$GDPWdiff <- factor(gdp_data$GDPWdiff,
levels = c('positive', 'negative','no change'),
labels = c('positive', 'negative','no change'))
gdp_data$REG <- factor(gdp_data$REG,
levels = c(0,1),
labels = c('Non-Democracy','Democracy'))
gdp_data$OIL <- factor(gdp_data$OIL,
levels = c(0,1),
labels = c('Otherwise','exceeded'))
ftable(xtabs(~OIL+REG+GDPWdiff,data = gdp_data))
#set a reference level for the outcome
gdp_data$GDPWdiff <- relevel(gdp_data$GDPWdiff, ref = "no change")
#Constract a unordered multinomial logit
unorder_model <- multinom(GDPWdiff~OIL+REG, data = gdp_data,)
summary(unorder_model)
#Question1.2
#Perform an ordered (proportional odds) logistic regression
order.model <- polr(GDPWdiff~OIL+REG, data = gdp_data, Hess = TRUE)
summary(order.model)
#run a poisson regression
# load data
mexico_elections <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/MexicoMuniData.csv")
#Run a poisson regression model
model.pois <- glm(PAN.visits.06 ~competitive.district+marginality.06+PAN.governor.06, data = mexico_elections, family = poisson)
summary(model.pois)
# predicted the mean number of visits from the winning PAN presidential candidate for a hypothetical district by hand.
exp(cfs[1] + cfs[2] * 1 + cfs[3] * 0 + cfs[4] * 1 )
# predicted the mean number by R
pred <- data.frame(
competitive.district=1,
marginality.06 = 0,
PAN.governor.06=1
)
# check with predict() function
predict(model.pois, newdata = pred, type = "response")
summary(model.pois)
