data(child)
data(child)
#### Completed
# a)
child_surv <- with(child, Surv(enter, exit, event))
data <- read.csv("data/long97.csv")
with(data,
hist(job))
data <- read.csv(“E:/Users/12420/Documents/GitHub/StatsII_Spring2024/datasets/long97.csv”)
data <- read.csv(“E:/Users/12420/Documents/GitHub/StatsII_Spring2024/datasets/long97.csv”)
data <- read.csv("E:/Users/12420/Documents/GitHub/StatsII_Spring2024/datasets/long97.csv")
with(data,
hist(job))
# OLS on original data
summary(m1 <- lm(job ~ ., data[,-2])) # effect of being a woman is negative
# OLS on censored data (tau y = 1)
summary(m2 <- lm(jobcen ~ ., data[,-1])) # effect of being a woman is negative but small and not significant
# OLS on truncated data
summary(m3 <- lm(jobcen ~ ., data = data[data$jobcen > 1, -1])) # effect of being a woman is positive and not significant
# Tobit
summary(m.tobit <- vglm(job ~ ., tobit(Lower = 1), data[,-2])) # effect of being a woman is significant and negative
data(child)
View(data)
View(m1)
View(data)
data(child)
data <- read.csv("E:/Users/12420/Documents/GitHub/StatsII_Spring2024/datasets/long97.csv")
with(data,
hist(job))
# OLS on original data
summary(m1 <- lm(job ~ ., data[,-2])) # effect of being a woman is negative
# OLS on censored data (tau y = 1)
summary(m2 <- lm(jobcen ~ ., data[,-1])) # effect of being a woman is negative but small and not significant
# OLS on truncated data
summary(m3 <- lm(jobcen ~ ., data = data[data$jobcen > 1, -1])) # effect of being a woman is positive and not significant
# Tobit
summary(m.tobit <- vglm(job ~ ., tobit(Lower = 1), data[,-2])) # effect of being a woman is significant and negative
##################################
# Tutorial 10: Survival Analysis #
##################################
load(child)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("survival", "eha", "tidyverse", "ggfortify", "stargazer"),  pkgTest)
# The `child` dataset from the `eha` package is a dataset of 26,855 children born in
# The `child` dataset from the `eha` package is a dataset of 26,855 children born in
# Skellefte?, Sweden, 1850-1884. Children are followed for fifteen years or until death or
# The `child` dataset from the `eha` package is a dataset of 26,855 children born in
# Skellefte?, Sweden, 1850-1884. Children are followed for fifteen years or until death or
# outmigration.
# The `child` dataset from the `eha` package is a dataset of 26,855 children born in
# Skellefte?, Sweden, 1850-1884. Children are followed for fifteen years or until death or
# outmigration.
# The response variable is `exit`
# The `child` dataset from the `eha` package is a dataset of 26,855 children born in
# Skellefte?, Sweden, 1850-1884. Children are followed for fifteen years or until death or
# outmigration.
# The response variable is `exit`
# Explanatory variables include:
# The `child` dataset from the `eha` package is a dataset of 26,855 children born in
# Skellefte?, Sweden, 1850-1884. Children are followed for fifteen years or until death or
# outmigration.
# The response variable is `exit`
# Explanatory variables include:
# - id: An identification number.
# The `child` dataset from the `eha` package is a dataset of 26,855 children born in
# Skellefte?, Sweden, 1850-1884. Children are followed for fifteen years or until death or
# outmigration.
# The response variable is `exit`
# Explanatory variables include:
# - id: An identification number.
# - m.id: Mother's id.
# The `child` dataset from the `eha` package is a dataset of 26,855 children born in
# Skellefte?, Sweden, 1850-1884. Children are followed for fifteen years or until death or
# outmigration.
# The response variable is `exit`
# Explanatory variables include:
# - id: An identification number.
# - m.id: Mother's id.
# - sex: Sex.
# The `child` dataset from the `eha` package is a dataset of 26,855 children born in
# Skellefte?, Sweden, 1850-1884. Children are followed for fifteen years or until death or
# outmigration.
# The response variable is `exit`
# Explanatory variables include:
# - id: An identification number.
# - m.id: Mother's id.
# - sex: Sex.
# - socBranch: Working branch of family (father).
# The `child` dataset from the `eha` package is a dataset of 26,855 children born in
# Skellefte?, Sweden, 1850-1884. Children are followed for fifteen years or until death or
# outmigration.
# The response variable is `exit`
# Explanatory variables include:
# - id: An identification number.
# - m.id: Mother's id.
# - sex: Sex.
# - socBranch: Working branch of family (father).
# - birthdate: Birthdate.
# Skellefte?, Sweden, 1850-1884. Children are followed for fifteen years or until death or
# outmigration.
# The response variable is `exit`
# Explanatory variables include:
# - id: An identification number.
# - m.id: Mother's id.
# - sex: Sex.
# - socBranch: Working branch of family (father).
# - birthdate: Birthdate.
# - enter: Start age of follow-up, always zero.
# outmigration.
# The response variable is `exit`
# Explanatory variables include:
# - id: An identification number.
# - m.id: Mother's id.
# - sex: Sex.
# - socBranch: Working branch of family (father).
# - birthdate: Birthdate.
# - enter: Start age of follow-up, always zero.
# - exit: Age of departure, either by death or emigration.
# The response variable is `exit`
# Explanatory variables include:
# - id: An identification number.
# - m.id: Mother's id.
# - sex: Sex.
# - socBranch: Working branch of family (father).
# - birthdate: Birthdate.
# - enter: Start age of follow-up, always zero.
# - exit: Age of departure, either by death or emigration.
# - event: Type of departure, death = 1, right censoring = 0.
# Explanatory variables include:
# - id: An identification number.
# - m.id: Mother's id.
# - sex: Sex.
# - socBranch: Working branch of family (father).
# - birthdate: Birthdate.
# - enter: Start age of follow-up, always zero.
# - exit: Age of departure, either by death or emigration.
# - event: Type of departure, death = 1, right censoring = 0.
# - illeg: Born out of marriage ("illegitimate")?
## a) Using the Surv() function, build a survival object out of the `child` data.frame.
## a) Using the Surv() function, build a survival object out of the `child` data.frame.
##    Using survfit() and R's plotting functions, produce a Kaplan-Meier plot of the data,
## a) Using the Surv() function, build a survival object out of the `child` data.frame.
##    Using survfit() and R's plotting functions, produce a Kaplan-Meier plot of the data,
##    firstly for overall survival, and secondly comparing categories of socBranch. How do
## b) Run a Cox Proportional Hazard regression on the data, using an additive model with
## b) Run a Cox Proportional Hazard regression on the data, using an additive model with
##    `socBranch` and `sex` as explanatory variables. Run a test to assess the quality of the
## b) Run a Cox Proportional Hazard regression on the data, using an additive model with
##    `socBranch` and `sex` as explanatory variables. Run a test to assess the quality of the
##    model. How can we interpret the coefficients? Plot the model.
## b) Run a Cox Proportional Hazard regression on the data, using an additive model with
##    `socBranch` and `sex` as explanatory variables. Run a test to assess the quality of the
##    model. How can we interpret the coefficients? Plot the model.
## b) Run a Cox Proportional Hazard regression on the data, using an additive model with
##    `socBranch` and `sex` as explanatory variables. Run a test to assess the quality of the
##    model. How can we interpret the coefficients? Plot the model.
data(child)
View(detachAllPackages)
View(pkgTest)
library(tidyverse)
library (psych)
library (GPArotation)
library(sem)
data(bfi)
data(bfi)
str(bfi)
describe(bfi)
str(bfi)
describe(bfi)
N <- nrow(bfi)
index <- seq(1, N)
EFA.i <- sample(index, floor((0.5 * N)))
CFA.i <- index[!(index %in% EFA.i)]
View(bfi.keys)
View(bfi)
N <- nrow(bfi)
index <- seq(1, N)
EFA.i <- sample(index, floor((0.5 * N)))
CFA.i <- index[!(index %in% EFA.i)]
EFA.dat <- bfi[EFA.i, ]
CFA.dat <- bfi[CFA.i, ]
EFA.dat <- bfi[EFA.i, ]
CFA.dat <- bfi[CFA.i, ]
View(CFA.dat)
View(EFA.dat)
View(CFA.dat)
head(EFA.dat, 2)
CFA.dat <- bfi[CFA.i, ]
group_var <- vector("numeric", nrow(bfi))
group_var[CFA.i] <- 1
group_var
head(CFA.dat, 2)
bfi.g <- cbind(bfi, group_var)
describeBy(bfi.g, group = group_var)
# Calculate the correlation matrix first
EFA.cor <- cor(EFA.dat, use = "pairwise.complete.obs")
# Then use that correlation matrix to create the scree plot
scree(EFA.cor, factors = FALSE)
vss(EFA.dat, rotate = "none")
# Run the EFA with six factors (as indicated by your scree plot)
EFA.mod <- fa(EFA.dat, nfactors = 6)
View(EFA.dat)
View(CFA.dat)
View(EFA.mod)
View(EFA.mod)
EFA.mod$uniquenesses
EFA.mod$loadings
apply(EFA.mod$loadings^2, 1, sum)
# Run each theorized EFA on your dataset
EFA.mod.5 <- fa(EFA.dat, nfactors = 5)
summary(EFA.mod.5)
EFA.mod.6 <- fa(EFA.dat, nfactors = 6)
# View results from the model object
EFA.mod
fa.diagram(EFA.mod)
# Run the EFA with six factors (as indicated by your scree plot)
EFA.mod <- fa(EFA.dat, nfactors = 6)
# View results from the model object
EFA.mod
fa.diagram(EFA.mod)
EFA.mod$uniquenesses
EFA.mod$loadings
apply(EFA.mod$loadings^2, 1, sum)
EFA.mod$uniquenesses
# View results from the model object
EFA.mod
fa.diagram(EFA.mod)
apply(EFA.mod$loadings^2, 1, sum)
